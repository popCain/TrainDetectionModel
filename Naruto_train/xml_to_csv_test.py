"""
Usage:
# Create train data:
python xml_to_csv.py -i [PATH_TO_IMAGES_FOLDER]/train -o [PATH_TO_ANNOTATIONS_FOLDER]/train_labels.csv

# Create test data:
python xml_to_csv.py -i [PATH_TO_IMAGES_FOLDER]/test -o [PATH_TO_ANNOTATIONS_FOLDER]/test_labels.csv
"""

import os
import glob
import pandas as pd
# 命令行参数库（导入模块）
import argparse
import xml.etree.ElementTree as ET

## path: '*.xml'文件所在的文件夹路径
def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """
    classes_names = []
    xml_list = []
    for xml_file in glob.glob(path + "/*.xml"):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall("object"):
            classes_names.append(member[0].text)
            value = (
                root.find("filename").text,
                int(root.find("size")[0].text),
                int(root.find("size")[1].text),
                member[0].text,
                # 这里可能有区别（根据不同软件获取的VOC类型xml文件）
                int(member[5][0].text),
                int(member[5][1].text),
                int(member[5][2].text),
                int(member[5][3].text),
            )
            xml_list.append(value)
    column_name = [
        "filename",
        "width",
        "height",
        "class",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
    ]
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    # set()创建无序不重复数据集
    classes_names = list(set(classes_names))
    classes_names.sort()
    return xml_df, classes_names


def main():
    # Initiate argument parser（创建一个解析对象）
    parser = argparse.ArgumentParser(
        # -help时显示的提示描述
        description="Sample TensorFlow XML-to-CSV converter"
    )

    # 添加命令参数和选项
    parser.add_argument(
        "-i",
        "--inputDir",
        help="Path to the folder where the input .xml files are stored",
        type=str,
        default="annotations/test_xml"
    )
    parser.add_argument(
        "-o", "--outputFile", 
        help="Name of output .csv file (including path)", 
        type=str,
        default = "annotations/CSVFile"
    )

    parser.add_argument(
        "-l",
        "--labelMapDir",
        help="Directory path to save label_map.pbtxt file is specified.",
        type=str,
        default="",
    )

    # 进行解析
    args = parser.parse_args()

    if args.inputDir is None:
        args.inputDir = os.getcwd()
        print(args.inputDir)
    if args.outputFile is None:
        args.outputFile = args.inputDir + "/label_test.csv"

    # 断言（若不满足则异常退出，下面的代码不会执行）
    assert os.path.isdir(args.inputDir)

    # 输出csv文件路径
    csv_path = args.outputFile + "/label_test.csv"
    # 目标目录（即要创建的目录）已经存在时，不会抛出异常
    os.makedirs(os.path.dirname(args.outputFile), exist_ok=True)
    xml_df, classes_names = xml_to_csv(args.inputDir)
    xml_df.to_csv(csv_path, index=None)
    print("Successfully converted xml to csv！！\n")

    ## 类别标签文件：label_map.pbtxt(id:name)
    if args.labelMapDir:
        os.makedirs(args.labelMapDir, exist_ok=True)
        label_map_path = os.path.join(args.labelMapDir, "label_map.pbtxt")
        print("Generate `{}`".format(label_map_path))

        # enumerate(classes_names)：创建一个枚举类型 -- [(0, 'label1'), (1, 'label2'), (2, 'label3')...]
        # Create the `label_map.pbtxt` file
        pbtxt_content = ""
        for i, class_name in enumerate(classes_names):
            # ()为了说明括号内为一句话 -- *可以换行
            pbtxt_content = (pbtxt_content
                + "item {{\n    id: {0}\n    name: '{1}'\n}}\n\n".format(i + 1, class_name)
                )

        ## 去除首尾空格
        pbtxt_content = pbtxt_content.strip()
        print(pbtxt_content)
        with open(label_map_path, "w") as f:
            f.write(pbtxt_content)


if __name__ == "__main__":
    main()
